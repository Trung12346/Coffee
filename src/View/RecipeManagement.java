/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Model.IngredientDataSet;
import Model.RMTable1;
import Model.RMTable2;
import static Service.IngredientDAO.*;
import Model.JSON;
import Model.TableCellListener;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;

/**
 *
 * @author maith
 */
public class RecipeManagement extends javax.swing.JPanel {

    DefaultTableModel model_2;
    DefaultTableModel model_1;
    int selectedProduct = 0;
    /**
     * Creates new form RecipeManagement
     */
    ArrayList<RMTable2> table_2Rows = new ArrayList();

    public RecipeManagement() throws SQLException {
        initComponents();
        model_2 = (DefaultTableModel) table_2.getModel();
        model_1 = (DefaultTableModel) table_1.getModel();

        JComboBox<String> cb = new JComboBox(new String[]{"kg", "cái"});
        cb.setFocusable(false);
        cb.setSelectedItem("kg");
//        TableColumn c = table2.getColumnModel().getColumn(2);
//        c.setCellEditor(new DefaultCellEditor(cb));
//        model.setValueAt(cb, 0, 2);
        DefaultCellEditor editor = new DefaultCellEditor(cb) {
            @Override
            public Component getTableCellEditorComponent(JTable table, Object value,
                    boolean isSelected, int row, int column) {
                // Set selected item based on current cell value
                cb.setSelectedItem(value);
                return super.getTableCellEditorComponent(table, value, isSelected, row, column);
            }
        };

        table_2.getColumnModel().getColumn(2).setCellEditor(editor);
        model_2.setRowCount(0);
        loadTable_1(getProducts());

        Action action = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                TableCellListener tcl = (TableCellListener) e.getSource();
//                System.out.println("Row   : " + tcl.getRow());
//                System.out.println("Column: " + tcl.getColumn());
//                System.out.println("Old   : " + tcl.getOldValue());
//                System.out.println("New   : " + tcl.getNewValue());
                if (tcl.getColumn() == 1) {
                    table_2Rows.get(tcl.getRow()).quantity = (float) tcl.getNewValue();
                } else if (tcl.getColumn() == 0) {
                    IngredientDataSet ids = searchIngredient((String) tcl.getNewValue());
                    if (ids != null) {
                        model_2.setValueAt(ids.unit, (int) tcl.getRow(), 2);
                    }
                    table_2Rows.get((int) tcl.getRow()).label = (String) tcl.getNewValue();
                } else if (tcl.getColumn() == 2) {
                    table_2Rows.get((int) tcl.getRow()).unit = (String) model_2.getValueAt((int) tcl.getRow(), 2);
                }
            }
        };

        TableCellListener tcl = new TableCellListener(table_2, action);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void loadTable_1(ArrayList<RMTable1> rows) {
        model_1.setRowCount(0);
        rows.forEach(row -> {
            model_1.addRow(new Object[]{
                row.productId,
                row.product,
                row.quantity
            });
        });
    }

    public void loadTable_2(ArrayList<RMTable2> rows) {
        model_2.setRowCount(0);
        rows.forEach(row -> {
            model_2.addRow(new Object[]{
                row.label,
                row.quantity
            });
            model_2.setValueAt(row.unit, model_2.getRowCount() - 1, 2);
        });
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        table_1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_2 = new javax.swing.JTable();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable2);

        setBackground(java.awt.SystemColor.info);

        table_1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Sản phẩm", "Có thể tạo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_1MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(table_1);

        jScrollPane1.setViewportView(jScrollPane5);

        jButton1.setBackground(new java.awt.Color(102, 51, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(java.awt.SystemColor.info);
        jButton1.setText("Thêm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(102, 51, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setForeground(java.awt.SystemColor.info);
        jButton2.setText("Xoá");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(102, 51, 0));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setForeground(java.awt.SystemColor.info);
        jButton3.setText("Lưu");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        table_2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nguyên liệu", "Số lượng", "Đơn vị"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        table_2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table_2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(291, 291, 291))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        table_2Rows.add(new RMTable2("???", 0, "kg"));
        loadTable_2(table_2Rows);
        try {
            System.out.println(JSON.StringifyJSON(table_2Rows));
        } catch (JsonProcessingException ex) {
            Logger.getLogger(RecipeManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        System.out.println(table_2.getSelectedRow());
        int selectedRow = table_2.getSelectedRow();
        if (selectedRow >= 0) {
            table_2Rows.remove(table_2.getSelectedRow());
        }
        loadTable_2(table_2Rows);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
            for (int i = 0; i < table_2Rows.size(); i++) {
                RMTable2 row = table_2Rows.get(i);
                if (row.id == 0) {
                    if (row.quantity <= 0 || row.label.equals("???")) {
                        throw new Exception("invalid input");
                    }
                    for (int x = 0; x < table_2Rows.size(); x++) {
                        RMTable2 r = table_2Rows.get(x);
                        if (r.id > 0) {
                            if (row.label.equals(r.label)) {
                                throw new Exception("duplicated");
                            }
                        }

                    }
                }
            }
            System.out.println("must not run");
            table_2Rows.forEach(row -> {
                try {
                    if (row.id > 0) {

                        updateRecipe(selectedProduct, row.id, row.quantity, row.unit);
                        

                    } else {
                        addProductIngredient(selectedProduct, row.quantity, row.label, row.unit);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(RecipeManagement.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
            loadTable_1(getProducts());
        } catch (Exception ex) {
            System.out.println(ex);
            JOptionPane.showMessageDialog(this, "khong hop le");
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void table_2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_table_2MouseClicked

    private void table_1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_1MouseClicked
        // TODO add your handling code here:
        int selectedRow = table_1.getSelectedRow();
        selectedProduct = (int) table_1.getValueAt(selectedRow, 0);
        int id = Integer.parseInt(table_1.getValueAt(selectedRow, 0).toString());
        if (selectedRow >= 0) {
            try {
                table_2Rows = getProductIngredients(id);
                loadTable_2(table_2Rows);

            } catch (SQLException ex) {
                Logger.getLogger(RecipeManagement.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_table_1MouseClicked

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(RecipeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(RecipeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(RecipeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(RecipeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                try {
//                    new RecipeManagement().setVisible(true);
//                } catch (SQLException ex) {
//                    Logger.getLogger(RecipeManagement.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable table_1;
    private javax.swing.JTable table_2;
    // End of variables declaration//GEN-END:variables

}
