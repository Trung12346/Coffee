/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Service.StaffDAO;
import java.sql.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.util.concurrent.atomic.AtomicInteger;
import Model.objectToInt;
import Service.CongDAO;
import Service.dbConnection;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import javax.swing.JOptionPane;
import java.sql.Statement;
import java.time.Duration;
import com.toedter.calendar.JDateChooser;

/**
 *
 * @author admin
 */
public class ChamCong extends javax.swing.JPanel {

    DefaultTableModel model;
    private StaffDAO stdao = new StaffDAO();
    private CongDAO cdao = new CongDAO();

    /**
     * Creates new form ChamCong
     */
    public ChamCong() throws SQLException {
        initComponents();
        model = (DefaultTableModel) tablecong.getModel();

        ArrayList<Integer> staffIds = stdao.getStaffIds();
        ArrayList<Integer> todayCongIds = cdao.getTodayCongIds();
        staffIds.forEach(id -> {
            if (!todayCongIds.contains(id)) {
                try {
                    cdao.addCong(id);
                } catch (SQLException ex) {
                    Logger.getLogger(ChamCong.class.getName()).log(Level.SEVERE, null, ex);
                    javax.swing.JOptionPane.showMessageDialog(null, "Lỗi khi thêm công: " + ex.getMessage(), "Lỗi", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        displayData();
    }

    private void displayData() throws SQLException {
        model.setRowCount(0);
        ResultSet rs = cdao.getTodayCong();
        try {
            while (rs.next()) {
                int showsUp = rs.getInt("shows_up");
                String trangThai;
                switch (showsUp) {
                    case 0 ->
                        trangThai = "Vắng";
                    case 1 ->
                        trangThai = "Đi muộn";
                    case 2 ->
                        trangThai = "Có mặt";
                    default ->
                        trangThai = "Không xác định";
                }

                model.addRow(new Object[]{
                    rs.getInt("cong_id"),
                    rs.getInt("staff_id"),
                    rs.getString("staff_name"),
                    rs.getDate("date"),
                    rs.getTime("show_up_time"),
                    rs.getTime("shift_start") + "-" + rs.getTime("shift_end"),
                    trangThai
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Lỗi khi hiển thị dữ liệu: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void handleAssignShift(int ca) {
        int row = tablecong.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Hãy chọn một nhân viên để phân ca.");
            return;
        }

        int congId = (int) model.getValueAt(row, 0);

        Time shiftStart, shiftEnd;
        if (ca == 1) {
            shiftStart = Time.valueOf("06:00:00");
            shiftEnd = Time.valueOf("11:00:00");
        } else {
            shiftStart = Time.valueOf("11:00:00");
            shiftEnd = Time.valueOf("17:00:00");
        }

        try {
            if (cdao.isShiftTaken(shiftStart, shiftEnd)) {
                JOptionPane.showMessageDialog(this, "Ca này đã có người làm rồi.");
                return;
            }

            cdao.updateShift(congId, shiftStart, shiftEnd);
            model.setValueAt(shiftStart.toString() + " - " + shiftEnd.toString(), row, 5); // cột "ca làm"
            JOptionPane.showMessageDialog(this, "Phân ca thành công");
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi phân ca: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablecong = new javax.swing.JTable();
        btnCa1 = new javax.swing.JButton();
        btnCa2 = new javax.swing.JButton();

        tablecong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Ma cong", "Ma nhan vien", "Ten nhan vien", "ngay cong", "thoi gian co mat", "ca lam", "trang thai", "Cong"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablecong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablecongMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablecong);

        jScrollPane2.setViewportView(jScrollPane3);

        btnCa1.setText("ca 1");
        btnCa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCa1ActionPerformed(evt);
            }
        });

        btnCa2.setText("ca 2 ");
        btnCa2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCa2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(92, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCa1)
                        .addGap(18, 18, 18)
                        .addComponent(btnCa2))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCa1)
                    .addComponent(btnCa2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void ganCa(String caLam) {
        int row = tablecong.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Hãy chọn một dòng trong bảng.");
            return;
        }

        tablecong.setValueAt(caLam, row, 7);

        String[] parts = caLam.split("-");
        if (parts.length != 2) {
            JOptionPane.showMessageDialog(null, "Định dạng ca làm không hợp lệ.");
            return;
        }

        String shiftStart = parts[0];
        String shiftEnd = parts[1];

        String congId = tablecong.getValueAt(row, 0).toString();

        try {
            Connection conn = dbConnection.connect();
            PreparedStatement stmt = conn.prepareStatement("UPDATE cong SET shift_start = ?, shift_end = ? WHERE cong_id = ?");
            stmt.setTime(1, Time.valueOf(shiftStart));
            stmt.setTime(2, Time.valueOf(shiftEnd));
            stmt.setString(3, congId);
            stmt.executeUpdate();
            conn.close();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Lỗi cập nhật database.");
        }
    }

    private void tablecongMouseClicked(java.awt.event.MouseEvent evt) {
         int row = tablecong.getSelectedRow();
    int column = tablecong.getSelectedColumn();

    // Chỉ xử lý khi click vào cột checkbox chấm công
    if (column == 7) {
        Boolean isChecked = Boolean.valueOf(tablecong.getValueAt(row, column).toString());

        // Chỉ xử lý khi người dùng tích vào checkbox
        if (!isChecked) return;

        String caLam = tablecong.getValueAt(row, 5).toString();

        // Kiểm tra định dạng ca làm
        if (caLam == null || !caLam.contains("-")) {
            JOptionPane.showMessageDialog(null, "Vui lòng phân ca trước khi chấm công.");
            tablecong.setValueAt(false, row, 7);
            return;
        }

        // Kiểm tra đã chấm công chưa
        Object showUpTime = tablecong.getValueAt(row, 4);
        if (showUpTime != null && !showUpTime.toString().isBlank()) {
            JOptionPane.showMessageDialog(null, "Bạn đã chấm công ca này rồi. Không thể chấm lại.");
            tablecong.setValueAt(false, row, 7);
            return;
        }

        // Kiểm tra ca làm đã có người khác chấm chưa
        for (int i = 0; i < tablecong.getRowCount(); i++) {
            if (i != row) {
                Object caKhac = tablecong.getValueAt(i, 5);
                Object daCham = tablecong.getValueAt(i, 4);

                if (caKhac != null && daCham != null && caLam.equals(caKhac.toString())) {
                    JOptionPane.showMessageDialog(null, "Ca làm này đã có người chấm công.");
                    tablecong.setValueAt(false, row, 7);
                    return;
                }
            }
        }

        // Xử lý thời gian
        LocalTime now = LocalTime.now();

        String[] parts = caLam.split("-");
        if (parts.length != 2) {
            JOptionPane.showMessageDialog(null, "Định dạng ca làm không hợp lệ.");
            tablecong.setValueAt(false, row, 7);
            return;
        }

        LocalTime batDau;
        try {
            batDau = LocalTime.parse(parts[0].trim());
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(null, "Thời gian bắt đầu ca làm không hợp lệ.");
            tablecong.setValueAt(false, row, 7);
            return;
        }

        if (now.isBefore(batDau)) {
            JOptionPane.showMessageDialog(null, "Ca làm chưa bắt đầu, vui lòng thử lại sau.");
            tablecong.setValueAt(false, row, 7);
            return;
        }

        long delayInMinutes = Duration.between(batDau, now).toMinutes();
        int showsUp = (delayInMinutes <= 5) ? 2 : 1;

        int congId = (int) tablecong.getValueAt(row, 0);
        cdao.updateShowsUp(congId, now, showsUp);

        // Cập nhật hiển thị
        tablecong.setValueAt(now.toString(), row, 4); // Thời gian đến
        tablecong.setValueAt(showsUp == 2 ? "Đúng giờ" : "Đi muộn", row, 6); // Trạng thái
    }
    }

    private void btnCa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCa1ActionPerformed
        
      int row = tablecong.getSelectedRow();
    if (row == -1) {
        JOptionPane.showMessageDialog(null, "Hãy chọn một dòng.");
        return;
    }

    // Check đã phân ca chưa
    Object caDaPhan = tablecong.getValueAt(row, 5);
    if (caDaPhan != null) {
    String caText = caDaPhan.toString().trim();
    if (!caText.isEmpty() && !caText.equalsIgnoreCase("null-null") && !caText.equalsIgnoreCase("null")) {
        JOptionPane.showMessageDialog(null, "Nhân viên này đã được phân ca rồi.");
        return;
    }
}

    String caLam = "06:00:00-11:00:00";
    tablecong.setValueAt(caLam, row, 5); // cột ca làm

    String[] parts = caLam.split("-");
    String shiftStart = parts[0];
    String shiftEnd = parts[1];
    String congId = tablecong.getValueAt(row, 0).toString();

    try {
        Connection conn = dbConnection.connect();
        PreparedStatement stmt = conn.prepareStatement(
                "UPDATE cong SET shift_start = ?, shift_end = ? WHERE cong_id = ?"
        );
        stmt.setTime(1, Time.valueOf(shiftStart));
        stmt.setTime(2, Time.valueOf(shiftEnd));
        stmt.setString(3, congId);
        stmt.executeUpdate();
        displayData();
        conn.close();
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Lỗi cập nhật Ca 1.");
    }
    }//GEN-LAST:event_btnCa1ActionPerformed

    private void btnCa2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCa2ActionPerformed
        int row = tablecong.getSelectedRow();
    if (row == -1) {
        JOptionPane.showMessageDialog(null, "Hãy chọn một dòng.");
        return;
    }

    // Kiểm tra nếu đã được phân ca rồi thì không cho gán lại
    Object caDaPhan = tablecong.getValueAt(row, 5);
    if (caDaPhan != null) {
    String caText = caDaPhan.toString().trim();
    if (!caText.isEmpty() && !caText.equalsIgnoreCase("null-null") && !caText.equalsIgnoreCase("null")) {
        JOptionPane.showMessageDialog(null, "Nhân viên này đã được phân ca rồi.");
        return;
    }
}

    String caLam = "13:00:00-17:00:00";
    tablecong.setValueAt(caLam, row, 5); // gán vào cột ca làm

    String[] parts = caLam.split("-");
    String shiftStart = parts[0];
    String shiftEnd = parts[1];
    String congId = tablecong.getValueAt(row, 0).toString();

    try {
        Connection conn = dbConnection.connect();
        PreparedStatement stmt = conn.prepareStatement(
                "UPDATE cong SET shift_start = ?, shift_end = ? WHERE cong_id = ?"
        );
        stmt.setTime(1, Time.valueOf(shiftStart));
        stmt.setTime(2, Time.valueOf(shiftEnd));
        stmt.setString(3, congId);
        stmt.executeUpdate();
        displayData();
        conn.close();
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Lỗi cập nhật Ca 2.");
    
           
    }    }//GEN-LAST:event_btnCa2ActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ChamCong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ChamCong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ChamCong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ChamCong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                try {
//                    new ChamCong().setVisible(true);
//                } catch (SQLException ex) {
//                    Logger.getLogger(ChamCong.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCa1;
    private javax.swing.JButton btnCa2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tablecong;
    // End of variables declaration//GEN-END:variables
}
